name: Release-build

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:


jobs:

  prepare_release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
    - name: Create Release
      uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844
      with:
        draft: true
        prerelease: true
        name: pyevermizer v${{ env.RELEASE_VERSION }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_sdist:
    runs-on: ubuntu-latest

    steps:
    - name: Set env
      run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: recursive

    - uses: actions/setup-python@v5
      with:
        python-version: 3.12

    - name: Install requirements
      run: python -m pip install -U pip build

    - name: Build source distribution
      run: python -m build . --sdist

    - name: Store source distribution
      uses: actions/upload-artifact@v4
      with:
        name: python-package-sdist
        path: dist/

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@975c1b265e11dd76618af1c374e7981f9a6ff44a
      with:
        draft: true
        prerelease: true
        name: pyevermizer v${{ env.RELEASE_VERSION }}
        files: |
          ./dist/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        cibw_python: ["cp38-*", "cp39-*", "cp310-*", "cp311-*", "cp312-*"]
        cibw_arch: ["x86_64", "aarch64", "universal2", "AMD64"]
        exclude:
          # no universal2 on ubuntu, no aarch64 on windows
          - os: ubuntu-latest
            cibw_arch: universal2
          - os: macos-latest
            cibw_arch: aarch64
          # AMD64 only on windows
          - os: ubuntu-latest
            cibw_arch: AMD64
          - os: macos-latest
            cibw_arch: AMD64
          # windows only on AMD64
          - os: windows-latest
            cibw_arch: x86_64
          - os: windows-latest
            cibw_arch: aarch64
          - os: windows-latest
            cibw_arch: universal2

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 50
        submodules: recursive

    - name: Set env
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/*/v}" >> $GITHUB_ENV
        echo "PLATFORM_NAME=${{ matrix.os }}-${{ matrix.cibw_python }}-${{ matrix.cibw_arch }}" | tr '*' _ >> $GITHUB_ENV

    - name: Set up QEMU
      if: matrix.os == 'ubuntu-latest' && matrix.cibw_arch == 'aarch64'
      uses: docker/setup-qemu-action@v3
      with:
        platforms: arm64

    - uses: pypa/cibuildwheel@v2.20.0
      env:
        CIBW_BUILD_VERBOSITY: 1
        CIBW_BUILD: ${{ matrix.cibw_python }}
        CIBW_ARCHS: ${{ matrix.cibw_arch }}

    - name: Rename wheelhouse
      shell: bash
      run: mv wheelhouse dist

    - name: Store distribution package
      uses: actions/upload-artifact@v4
      with:
        name: python-package-${{ env.PLATFORM_NAME }}
        path: dist/

    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@975c1b265e11dd76618af1c374e7981f9a6ff44a
      with:
        draft: true
        prerelease: true
        name: pyevermizer v${{ env.RELEASE_VERSION }}
        files: |
          ./dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  publish_pypi:
    name: Publish to PyPI
    if: startsWith(github.ref, 'refs/tags/')  # only publish to PyPI on tag pushes
    needs:
    - build_sdist
    - build_wheels
    runs-on: ubuntu-latest

    environment:
      name: pypi
      url: https://pypi.org/p/pyevermizer

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-*
        merge-multiple: true
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1


  publish_testpypi:
    name: Publish to TestPyPI
    needs:
    - build_sdist
    - build_wheels
    runs-on: ubuntu-latest

    environment:
      name: testpypi
      url: https://test.pypi.org/p/pyevermizer

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - name: Download all the dists
      uses: actions/download-artifact@v4
      with:
        pattern: python-package-*
        merge-multiple: true
        path: dist/

    - name: Publish to TestPyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
